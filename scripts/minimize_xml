#!/usr/bin/env python3

from pathlib import Path
import argparse
import importlib
import sys
import os

from utils.oracle import build_oracle
from utils.ramdisk import RamDir, RamdiskUnavailable


def main():
	p = argparse.ArgumentParser(description=__doc__)
	
	p.add_argument(
		"predicate_dir",
		type=Path,
		help="Path to xmlprocessor predicate directory (contains r.sh and input.xml)",
	)

	p.add_argument(
		"--module",
		default="dd.ddmin",
		help="Python module with minimize(target, oracle, verbose) (default: dd.ddmin)",
	)
	
	p.add_argument(
		"--input",
		default="input.xml",
		help="Input filename within the predicate directory (default: input.xml)",
	)
	
	p.add_argument(
		"--script",
		default="r.sh",
		help="Predicate runner script within the directory (default: r.sh)",
	)

	p.add_argument(
		"--good-port",
		default=os.environ.get("BASEX_GOOD_PORT", "1984"),
		help="Port on which good BaseXServer is running (env BASEX_GOOD_PORT overrides; default: 1984)",
	)
	
	p.add_argument(
		"--timeout",
		type=float,
		default=60.0,
		help="Per-oracle timeout in seconds (default: 60)",
	)

	p.add_argument(
		"--ramdisk",
		action="store_true",
		help="Run predicate from a copy under /dev/shm (tmpfs) for faster I/O",
	)

	p.add_argument(
		"--ram-root",
		type=Path,
		default="/dev/shm",
		help="Root directory of tmpfs to use with --ramdisk (default: /dev/shm)",
	)
	
	p.add_argument(
		"--output",
		default="input.min.xml",
		help="Output filename for minimized result (default: input.min.xml)",
	)

	p.add_argument(
		"--verbose",
		action="store_true",
		help="Print minimizer logs",
	)
	
	args = p.parse_args()

	# construct paths
	base_path = args.predicate_dir.resolve()
	xml_path  = base_path / args.input

	# argument value errors
	if not xml_path.exists(): p.error(f"Input file not found: {xml_path}")
	if not (base_path / args.script).exists(): p.error(f"Oracle script not found: {base_path / args.script}")

	run_base = base_path
	ramdir   = None
	
	# optimization: run from a RAM-disk copy under /dev/shm
	if args.ramdisk:
		try: 
			ramdir = RamDir("minxml", args.ram_root)

			ramdir.copy([
				(base_path, base_path.name), 
				(base_path.parent / "lib", "lib"), 
				(base_path.parent / "shared", "shared")
			])

			run_base = ramdir.ram_dir / base_path.name
		
		except RamdiskUnavailable as e: print(f"Warning: {e}; running in-place", file=sys.stderr)

	# read input.xml to string
	original = xml_path.read_text(encoding="utf-8")
	
	oracle = build_oracle(
		base       =run_base, 
		input_name =args.input, 
		script_name=args.script, 
		good_port  =args.good_port,
		timeout    =args.timeout
	)

	try:
		# dynamically import the minimizer module and fetch its minimize()
		dd_variant = importlib.import_module(args.module)
		minimize   = getattr(dd_variant, "minimize")
	
	except Exception as e: p.error(f"Failed to import minimize from module '{args.module}': {e}")

	minimized = None

	try:
		minimized, n_oracle_calls, _ = minimize(
			target =original, 
			oracle =oracle,
			stats  =True,
			verbose=args.verbose
		)

		out_path = base_path / args.output
		out_path.write_text(minimized, encoding="utf-8")

		# success log
		if args.verbose:
			print("\nSummary:")
			print(f" - Minimized length: {len(minimized)}")
			print(f" - Oracle invocations: {n_oracle_calls}")
			print(f" - Wrote: {out_path}")

	# handle keyboard interrupts
	except KeyboardInterrupt:
		if args.verbose: print("\n\nInterrupted by user (130)", file=sys.stderr)
		sys.exit(130)

	finally:
		if args.verbose: print("\nCleaning up...")
		
		# restore original input.xml content
		if not args.ramdisk: 
			if args.verbose: print(f" - Restoring original input ({xml_path})...")
			xml_path.write_text(original, encoding="utf-8")

		# cleanup RAM-disk copy if used
		if ramdir is not None:
			if args.verbose: print(f" - Clearing RAM disk ({ramdir})...")
			ramdir.clean()

		if args.verbose: print(" - Done.")
	

if __name__ == "__main__":
	main()
